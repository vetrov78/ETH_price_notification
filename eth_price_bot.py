import os
import asyncio
import logging

import requests
from telegram import Bot
from telegram.error import TelegramError
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞
load_dotenv("config.env")

class CryptoBot:
    def __init__(self):
        self.bot = Bot(token=os.getenv("TELEGRAM_TOKEN"))
        self.chat_id = os.getenv("CHAT_ID")
        self.coingecko_url = "https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd"

    async def get_eth_price(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã ETH —á–µ—Ä–µ–∑ CoinGecko API"""
        try:
            response = requests.get(self.coingecko_url, timeout=10)
            data = response.json()
            return float(data["ethereum"]["usd"])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã ETH: {str(e)}")
            return None

    async def send_status(self, status: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ —Å —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–æ–π ETH"""
        try:
            price = await self.get_eth_price()
            message = (
                f"{status}\n\n"
                f"‚Ä¢ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ ETH: ${price:,.2f}" if price else "‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É ETH"
            )
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=message
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {status}")
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram: {str(e)}")

async def main():
    bot = CryptoBot()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ
    await bot.send_status("üöÄ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω</b>")

    try:
        # –û—Å–Ω–æ–≤–Ω–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ü–∏–∫–ª –±–æ—Ç–∞
        while True:
            try:
                # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É ETH(—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å)
                price = requests.get(
                        "https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd"
                    ).json()["ethereum"]["usd"]

                # print(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ ETH: ${price}")

                if price < float(os.getenv("ETH_CRITICAL_PRICE")):
                    message = f"üö® ETH Price Alert! üö®\n–¶–µ–Ω–∞ ETH —É–ø–∞–ª–∞ –Ω–∏–∂–µ ${os.getenv('ETH_CRITICAL_PRICE')}!\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${price}"
                    await bot.send_status(message)

                logger.info("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç...")
                await asyncio.sleep(180)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {str(e)}")
                await asyncio.sleep(5)

    except asyncio.CancelledError:
        await bot.send_status("üõë <b>–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>")
    finally:
        await bot.send_status("üõë <b>–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>")

if __name__ == "__main__":
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    try:
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        pass
    finally:
        loop.close()
