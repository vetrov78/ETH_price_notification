import os
import asyncio
import aiohttp
import logging
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, ContextTypes
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.WARNING,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log"),  # –õ–æ–≥–∏ –≤ —Ñ–∞–π–ª
        logging.StreamHandler()          # –õ–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞
load_dotenv("config.env")

class CryptoBot:
    def __init__(self):
        self.token = os.getenv("TELEGRAM_TOKEN")
        self.chat_id = os.getenv("CHAT_ID")
        self.critical_price = float(os.getenv("ETH_CRITICAL_PRICE", 3000))
        self.check_interval = 300  # 5 –º–∏–Ω—É—Ç
        self.app = Application.builder().token(self.token).build()
        self.session = aiohttp.ClientSession()

    async def get_eth_price(self) -> float:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã ETH —á–µ—Ä–µ–∑ CoinGecko API"""
        url = "https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd"
        try:
            async with self.session.get(url, timeout=60) as response:
                data = await response.json()
                return float(data["ethereum"]["usd"])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã ETH: {str(e)}")
            return None

    async def send_alert(self, price: float):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø–∞–¥–µ–Ω–∏–∏ —Ü–µ–Ω—ã"""
        message = (
            f"üö® ETH Price Alert! üö®\n"
            f"–¶–µ–Ω–∞ ETH —É–ø–∞–ª–∞ –Ω–∏–∂–µ ${self.critical_price}!\n"
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${price:,.2f}"
        )
        await self.send_message(message)

    async def send_message(self, text: str):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            await self.app.bot.send_message(
                chat_id=self.chat_id,
                text=text,
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

    async def price_check(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω—ã"""
        price = await self.get_eth_price()
        if price:
            logger.info(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ ETH: ${price:,.2f}")
            if price < self.critical_price:
                await self.send_alert(price)
        return price

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await update.message.reply_text(
            "ü§ñ –ë–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω—ã ETH\n\n"
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–Ω—É –∫–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã\n"
            f"–¢—Ä–µ–≤–æ–∂–Ω—ã–π –ø–æ—Ä–æ–≥: ${self.critical_price}"
        )

    async def price_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /price"""
        price = await self.get_eth_price()
        if price:
            await update.message.reply_text(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ ETH: ${price:,.2f}")
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É")

    async def run_checks(self):
        """–¶–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω—ã"""
        while True:
            try:
                await self.price_check()
                await asyncio.sleep(self.check_interval)
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}")
                await asyncio.sleep(60)

    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("price", self.price_command))

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await self.send_message("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        await self.app.initialize()
        await self.app.start()
        await self.app.updater.start_polling()

        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        self.check_task = asyncio.create_task(self.run_checks())

        try:
            while True:
                await asyncio.sleep(1)
        except asyncio.CancelledError:
            await self.shutdown()

    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        self.check_task.cancel()
        await self.send_message("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        await self.session.close()
        await self.app.updater.stop()
        await self.app.stop()
        await self.app.shutdown()

async def main():
    bot = CryptoBot()
    try:
        await bot.run()
    except Exception as e:
        logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        await bot.shutdown()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass